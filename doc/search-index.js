var searchIndex = JSON.parse('{\
"main":{"doc":"","t":"AANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNLLLLLLLLLLFFFLLLL","n":["parser","lexical_analyzer","And","Arrow","As","Assert","Assign","Async","Await","BitAnd","BitAndAssign","BitInvert","BitOr","BitOrAssign","BitXor","BitXorAssign","Break","Class","Colon","ColonAssign","Comma","Continue","Decorator","DecoratorAssign","Dedent","Def","Del","Div","DivAssign","Dot","DoubleDiv","DoubleDivAssign","Elif","Elipsis","Else","Eof","Equal","Except","False","Finally","For","From","Global","Greater","GreaterEqual","If","Import","In","Indent","Is","Lambda","LeftBracket","LeftCurly","LeftParen","Less","LessEqual","Minus","MinusAssign","Modulo","ModuloAssign","Mul","MulAssign","Name","Newline","None","Nonlocal","Not","NotEqual","Number","Or","Pass","Plus","PlusAssign","Power","PowerAssign","Raise","Return","RightBracket","RightCurly","RightParen","SemiColon","ShiftLeft","ShiftLeftAssign","ShiftRight","ShiftRightAssign","String","Token","True","Try","While","With","Yield","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","hash","into","is_operator_or_delimiter","is_reserved_keyword_or_name","lexer","to_owned","try_from","try_into","type_id"],"q":[[0,"main"],[1,"main::parser"],[2,"main::parser::lexical_analyzer"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Analyzes source code for operators or delimiters.","Analyze source code for reserved keyword or name literal","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[[1,1],2],[[],2],[[1,3],4],[[]],[[1,5]],[[]],[[6,6,6,7],8],[[9,7],8],[10,[[12,[[11,[1]],10]]]],[[]],[[],12],[[],12],[[],13]],"c":[],"p":[[4,"Token"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[15,"char"],[15,"u32"],[4,"Option"],[3,"Chars"],[3,"String"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
